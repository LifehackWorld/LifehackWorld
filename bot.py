import logging
import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import CommandStart
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

logging.basicConfig(level=logging.INFO)

choice_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")],
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ")]
    ],
    resize_keyboard=True,
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
)

moderation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_choose_reason")
    ]
])

rejection_reasons_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ùå –°–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞", callback_data="reject_reason_spam"),
        InlineKeyboardButton(text="‚ùå –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="reject_reason_low_quality")
    ],
    [
        InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ —Ç–µ–º–µ", callback_data="reject_reason_offtopic"),
        InlineKeyboardButton(text="‚ùå –î—Ä—É–≥–æ–µ", callback_data="reject_reason_other")
    ]
])

return_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_state = {}
moderation_queue = {}
pending_hashtags = {}
user_limits = defaultdict(list)

BOT_USERNAME = "LifehackWorld_bot"
HASHTAGS = ["#–µ–¥–∞", "#–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "#–±—ã—Ç", "#–∑–¥–æ—Ä–æ–≤—å–µ", "#–≥–æ—Ä–æ–¥", "#–¥—Ä—É–≥–æ–µ", "#–ø—Ä–æ—Å—Ç–æ–Æ–º–æ—Ä"]

CONTENT_LIMITS = {
    "text": 2,
    "photo": 2,
    "video": 2
}

CONTENT_TYPES = ["text", "photo", "video"]


def get_hashtag_keyboard():
    buttons = [InlineKeyboardButton(text=tag, callback_data=f"hashtag_{tag[1:]}") for tag in HASHTAGS]
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])


def check_limit(user_id: int, content_type: str) -> bool:
    ADMIN_ID = int(os.getenv("ADMIN_ID"))
    if user_id == ADMIN_ID:
        return True  # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å—ë

    now = datetime.now()
    window = timedelta(hours=12)  # –õ–∏–º–∏—Ç –Ω–∞ 12 —á–∞—Å–æ–≤

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫
    if user_id not in user_limits:
        user_limits[user_id] = []

    # –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø–æ–ø—ã—Ç–∫–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)
    user_limits[user_id] = [
        ts for ts in user_limits[user_id]
        if now - ts["time"] < window
    ]

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    type_count = sum(1 for ts in user_limits[user_id] if ts["type"] == content_type)

    if type_count >= CONTENT_LIMITS[content_type]:
        return False

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
    user_limits[user_id].append({"type": content_type, "time": now})
    return True



@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_state[message.from_user.id] = None
    await message.answer(
       "–ü—Ä–∏–≤–µ—Ç! üëã\n"
       "–¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ ¬´–õ–∞–π—Ñ—Ö–∞–∫–∏ —Å–æ –≤—Å–µ–≥–æ —Å–≤–µ—Ç–∞¬ª üåç\n\n"

  "–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ª—É—á—à–∏–µ —Ç—Ä—é–∫–∏, —Å–æ–≤–µ—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∫–∏ –æ—Ç –ª—é–¥–µ–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞.\n\n"
  "–•–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –ª–∞–π—Ñ—Ö–∞–∫–æ–º?\n\n"
  "–û—Ç–ø—Ä–∞–≤–ª—è–π:\n"
  "‚Äî –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ (–¥–æ 1 –º–∏–Ω) üé•\n"
  "‚Äî –§–æ—Ç–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º üì∏\n"
  "‚Äî –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –ª–µ–Ω—å —Å–Ω–∏–º–∞—Ç—å) ‚úçÔ∏è",
        reply_markup=choice_keyboard
    )


@dp.message(F.text.in_({"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ"}))
async def handle_choice(message: Message):
    user_id = message.from_user.id
    choice = message.text

    states = {
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç": "waiting_text",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ": "waiting_photo",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ": "waiting_video"
    }

    content_type = {
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç": "text",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ": "photo",
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ": "video"
    }[choice]

    if not check_limit(user_id, content_type):
        await message.answer("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞. –†–∞–∑—Ä–µ—à–µ–Ω–æ –¥–æ 2 –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ) –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤.")

        return

    user_state[user_id] = states[choice]

    prompts = {
        "waiting_text": "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ª–∞–π—Ñ—Ö–∞–∫ (–¥–æ 500 –∑–Ω–∞–∫–æ–≤):",
        "waiting_photo": "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:",
        "waiting_video": "üé• –û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (–¥–æ 1 –º–∏–Ω):"
    }

    await message.answer(prompts[user_state[user_id]], reply_markup=return_keyboard)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    user_id = message.from_user.id
    user_state[user_id] = None
    pending_hashtags.pop(user_id, None)
    await message.answer(
        "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
        reply_markup=choice_keyboard
    )






@dp.message(F.text)
async def handle_text_input(message: Message):
    user_id = message.from_user.id
    if user_state.get(user_id) == "waiting_text":
        if len(message.text) > 500:
            await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ 500 –∑–Ω–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        pending_hashtags[user_id] = {
            "type": "text",
            "text": f"–¢–µ–∫—Å—Ç –æ—Ç <b>{message.from_user.full_name}</b>:\n\n{message.text}"
        }
        await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –¥–ª—è —Å–≤–æ–µ–≥–æ –ª–∞–π—Ñ—Ö–∞–∫–∞:", reply_markup=get_hashtag_keyboard())
        user_state[user_id] = None
    elif user_state.get(user_id) in {"waiting_photo", "waiting_video"}:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")


# –•—Ä–∞–Ω–∏–º ID —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
handled_media_groups = set()

@dp.message(F.photo)
async def handle_photo_input(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º (media_group), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
    if message.media_group_id:
        if message.media_group_id in handled_media_groups:
            return  # –£–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–ª—å–±–æ–º ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        handled_media_groups.add(message.media_group_id)
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∞–ª—å–±–æ–º.")
        return

    if user_state.get(user_id) == "waiting_photo":
        caption = message.caption or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        pending_hashtags[user_id] = {
            "type": "photo",
            "file_id": message.photo[-1].file_id,
            "caption": f"–§–æ—Ç–æ –æ—Ç <b>{message.from_user.full_name}</b>:\n\n{caption}"
        }
        await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –¥–ª—è —Ñ–æ—Ç–æ:", reply_markup=get_hashtag_keyboard())
        user_state[user_id] = None
    elif user_state.get(user_id) in {"waiting_text", "waiting_video"}:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")



@dp.message(F.video)
async def handle_video_input(message: Message):
    user_id = message.from_user.id
    if user_state.get(user_id) == "waiting_video":
        caption = message.caption or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        pending_hashtags[user_id] = {
            "type": "video",
            "file_id": message.video.file_id,
            "caption": f"–í–∏–¥–µ–æ –æ—Ç <b>{message.from_user.full_name}</b>:\n\n{caption}"
        }
        await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –¥–ª—è –≤–∏–¥–µ–æ:", reply_markup=get_hashtag_keyboard())
        user_state[user_id] = None
    elif user_state.get(user_id) in {"waiting_text", "waiting_photo"}:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")


@dp.callback_query(F.data.startswith("hashtag_"))
async def handle_hashtag_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in pending_hashtags:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç.", show_alert=True)
        return

    tag_raw = callback.data.split("_", 1)[1]
    hashtag = f"#{tag_raw}"
    content = pending_hashtags.pop(user_id, None)

    if not content:
        await callback.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    add_link = f'\n\n<a href="https://t.me/{BOT_USERNAME}">–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ª–∞–π—Ñ—Ö–∞–∫</a>'

    try:
        if content["type"] == "text":
            full_text = f"{content['text']}\n\n{hashtag}{add_link}"
            sent = await bot.send_message(ADMIN_ID, full_text, reply_markup=moderation_keyboard)
            moderation_queue[sent.message_id] = {
                "type": "text",
                "content": full_text,
                "sender_id": user_id
            }

        elif content["type"] == "photo":
            caption = f"{content['caption']}\n\n{hashtag}{add_link}"
            sent = await bot.send_photo(ADMIN_ID, content["file_id"], caption=caption, reply_markup=moderation_keyboard)
            moderation_queue[sent.message_id] = {
                "type": "photo",
                "file_id": content["file_id"],
                "caption": caption,
                "sender_id": user_id
            }

        elif content["type"] == "video":
            caption = f"{content['caption']}\n\n{hashtag}{add_link}"
            sent = await bot.send_video(ADMIN_ID, content["file_id"], caption=caption, reply_markup=moderation_keyboard)
            moderation_queue[sent.message_id] = {
                "type": "video",
                "file_id": content["file_id"],
                "caption": caption,
                "sender_id": user_id
            }

        await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ª–∞–π—Ñ—Ö–∞–∫ —É–∂–µ –≤ –ø—É—Ç–∏.", reply_markup=choice_keyboard)
        await callback.answer("–†—É–±—Ä–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–∞.")
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:")


@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    message_id = callback.message.message_id
    data = moderation_queue.get(message_id)

    if not data:
        await callback.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    if callback.data == "approve":
        if data["type"] == "text":
            await bot.send_message(CHANNEL_ID, data["content"])
        elif data["type"] == "photo":
            await bot.send_photo(CHANNEL_ID, data["file_id"], caption=data["caption"])
        elif data["type"] == "video":
            await bot.send_video(CHANNEL_ID, data["file_id"], caption=data["caption"])

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.reply("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        await bot.send_message(data["sender_id"], "‚úÖ –í–∞—à –ª–∞–π—Ñ—Ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

        del moderation_queue[message_id]
        await callback.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")

    elif callback.data == "reject_choose_reason":
        await callback.message.edit_reply_markup(reply_markup=rejection_reasons_keyboard)
        await callback.answer()

    elif callback.data.startswith("reject_reason_"):
        reasons = {
            "reject_reason_spam": "–°–ø–∞–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–∞",
            "reject_reason_low_quality": "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            "reject_reason_offtopic": "–ù–µ –ø–æ —Ç–µ–º–µ",
            "reject_reason_other": "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
        }
        reason = reasons.get(callback.data, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        await bot.send_message(data["sender_id"], f"‚ùå –í–∞—à –ª–∞–π—Ñ—Ö–∞–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.reply(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        del moderation_queue[message_id]
        await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")


async def main():
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
